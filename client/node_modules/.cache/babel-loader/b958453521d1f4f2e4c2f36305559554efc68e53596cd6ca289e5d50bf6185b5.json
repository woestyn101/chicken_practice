{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = /** @class */function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n      client = _a.client,\n      resolvers = _a.resolvers,\n      fragmentMatcher = _a.fragmentMatcher;\n    this.selectionsToResolveCache = new WeakMap();\n    this.cache = cache;\n    if (client) {\n      this.client = client;\n    }\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  LocalState.prototype.runResolvers = function (_a) {\n    return __awaiter(this, arguments, void 0, function (_b) {\n      var document = _b.document,\n        remoteResult = _b.remoteResult,\n        context = _b.context,\n        variables = _b.variables,\n        _c = _b.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _c === void 0 ? false : _c;\n      return __generator(this, function (_d) {\n        if (document) {\n          return [2 /*return*/, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n        return [2 /*return*/, remoteResult];\n      });\n    });\n  };\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  };\n  // Server queries are stripped of all @client based selection sets.\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  LocalState.prototype.addExportedVariables = function (document_1) {\n    return __awaiter(this, arguments, void 0, function (document, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (context === void 0) {\n        context = {};\n      }\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2 /*return*/, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n        return [2 /*return*/, __assign({}, variables)];\n      });\n    });\n  };\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n            });\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n  // Query the cache and return matching data.\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n  LocalState.prototype.resolveDocument = function (document_1, rootValue_1) {\n    return __awaiter(this, arguments, void 0, function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n      var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n      if (context === void 0) {\n        context = {};\n      }\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (fragmentMatcher === void 0) {\n        fragmentMatcher = function () {\n          return true;\n        };\n      }\n      if (onlyRunForcedResolvers === void 0) {\n        onlyRunForcedResolvers = false;\n      }\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          selectionsToResolve: selectionsToResolve,\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        isClientFieldDescendant = false;\n        return [2 /*return*/, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n      var _this = this;\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                // Skip selections without @client directives\n                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                return [2 /*return*/];\n              }\n              if (!shouldInclude(selection, variables)) {\n                // Skip this entirely.\n                return [2 /*return*/];\n              }\n              if (isField(selection)) {\n                return [2 /*return*/, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n                  if (typeof fieldResult !== \"undefined\") {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                // This is a named fragment.\n                fragment = fragmentMap[selection.name.value];\n                invariant(fragment, 18, selection.name.value);\n              }\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2 /*return*/, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n              return [2 /*return*/];\n            });\n          });\n        };\n        return [2 /*return*/, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n      var _this = this;\n      return __generator(this, function (_a) {\n        if (!rootValue) {\n          return [2 /*return*/, null];\n        }\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n        // Usually all local resolvers are run when passing through here, but\n        // if we've specifically identified that we only want to run forced\n        // resolvers (that is, resolvers for fields marked with\n        // `@client(always: true)`), then we'll skip running non-forced resolvers.\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n            if (resolve) {\n              resultPromise = Promise.resolve(\n              // In case the resolve function accesses reactive variables,\n              // set cacheSlot to the current cache instance.\n              cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n        return [2 /*return*/, resultPromise.then(function (result) {\n          var _a, _b;\n          if (result === void 0) {\n            result = defaultResult;\n          }\n          // If an @export directive is associated with the current field, store\n          // the `as` export variable name and current result for later use.\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === \"export\" && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n          // Handle all scalar types here.\n          if (!field.selectionSet) {\n            return result;\n          }\n          // From here down, the field has a selection set, which means it's trying\n          // to query a GraphQLObjectType.\n          if (result == null) {\n            // Basically any field in a GraphQL response can be null, or missing\n            return result;\n          }\n          var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) {\n            return d.name.value === \"client\";\n          })) !== null && _b !== void 0 ? _b : false;\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n          }\n          // Returned value is an object, and the query has a sub-selection. Recurse.\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n    var _this = this;\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      // This is a nested array, recurse.\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n      }\n      // This is an object, run the selection set on it.\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n      }\n    }));\n  };\n  // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n  LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n    var isSingleASTNode = function (node) {\n      return !Array.isArray(node);\n    };\n    var selectionsToResolveCache = this.selectionsToResolveCache;\n    function collectByDefinition(definitionNode) {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        var matches_1 = new Set();\n        selectionsToResolveCache.set(definitionNode, matches_1);\n        visit(definitionNode, {\n          Directive: function (node, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread: function (spread, _, __, ___, ancestors) {\n            var fragment = fragmentMap[spread.name.value];\n            invariant(fragment, 19, spread.name.value);\n            var fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n              matches_1.add(spread);\n              fragmentSelections.forEach(function (selection) {\n                matches_1.add(selection);\n              });\n            }\n          }\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode);\n    }\n    return collectByDefinition(mainDefinition);\n  };\n  return LocalState;\n}();\nexport { LocalState };","map":{"version":3,"names":["invariant","visit","BREAK","isSelectionNode","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","LocalState","_a","cache","client","resolvers","fragmentMatcher","selectionsToResolveCache","WeakMap","addResolvers","setFragmentMatcher","prototype","_this","Array","isArray","forEach","resolverGroup","setResolvers","getResolvers","runResolvers","_b","document","remoteResult","context","variables","_c","onlyRunForcedResolvers","resolveDocument","data","then","localResult","__assign","result","getFragmentMatcher","clientQuery","serverQuery","prepareContext","getCacheKey","obj","identify","addExportedVariables","document_1","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue_1","rootValue","mainDefinition","fragments","fragmentMap","selectionsToResolve","collectSelectionsToResolve","definitionOperation","operation","defaultOperationType","charAt","toUpperCase","slice","execContext","isClientFieldDescendant","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","__awaiter","has","resolveField","fieldResult","push","fragment","typeCondition","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolve","resolverType","__typename","resolverMap","withValue","directives","directive","isClientField","d","resolveSubSelectedArray","item","isSingleASTNode","collectByDefinition","definitionNode","matches_1","Set","set","_","__","___","ancestors","add","FragmentSpread","spread","fragmentSelections","size","get"],"sources":["C:\\Users\\zachc\\Documents\\bootcamp\\chicken_practice\\client\\node_modules\\@apollo\\src\\core\\LocalState.ts"],"sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  DirectiveNode,\n  FragmentSpreadNode,\n  ExecutableDefinitionNode,\n} from \"graphql\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\n\nimport type { ApolloCache } from \"../cache/index.js\";\nimport type { FragmentMap, StoreObject } from \"../utilities/index.js\";\nimport {\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"../utilities/index.js\";\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport type { Resolvers, OperationVariables } from \"./types.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  }\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n  selectionsToResolve: Set<SelectionNode>;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client?: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher?: FragmentMatcher;\n  private selectionsToResolveCache = new WeakMap<\n    ExecutableDefinitionNode,\n    Set<SelectionNode>\n  >();\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach((resolverGroup) => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers\n      ).then((localResult) => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher | undefined {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables<TVars extends OperationVariables>(\n    document: DocumentNode,\n    variables: TVars = {} as TVars,\n    context = {}\n  ): /* returns at least the variables that were passed in */ Promise<TVars> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables\n      ).then((data) => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(\n              (arg) =>\n                arg.name.value === \"always\" &&\n                arg.value.kind === \"BooleanValue\" &&\n                arg.value.value === true\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false\n  ) {\n    const mainDefinition = getMainDefinition(\n      document\n    ) as OperationDefinitionNode;\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n    const selectionsToResolve = this.collectSelectionsToResolve(\n      mainDefinition,\n      fragmentMap\n    );\n\n    const definitionOperation = mainDefinition.operation;\n\n    const defaultOperationType =\n      definitionOperation ?\n        definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : \"Query\";\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      selectionsToResolve,\n      onlyRunForcedResolvers,\n    };\n    const isClientFieldDescendant = false;\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      isClientFieldDescendant,\n      rootValue,\n      execContext\n    ).then((result) => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    isClientFieldDescendant: boolean,\n    rootValue: TData,\n    execContext: ExecContext\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (\n        !isClientFieldDescendant &&\n        !execContext.selectionsToResolve.has(selection)\n      ) {\n        // Skip selections without @client directives\n        // (still processing if one of the ancestors or one of the child fields has @client directive)\n        return;\n      }\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(\n          selection,\n          isClientFieldDescendant,\n          rootValue,\n          execContext\n        ).then((fieldResult) => {\n          if (typeof fieldResult !== \"undefined\") {\n            resultsToMerge.push({\n              [resultKeyNameFromField(selection)]: fieldResult,\n            } as TData);\n          }\n        });\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named %s`, selection.name.value);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            isClientFieldDescendant,\n            rootValue,\n            execContext\n          ).then((fragmentResult) => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function () {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    rootValue: any,\n    execContext: ExecContext\n  ): Promise<any> {\n    if (!rootValue) {\n      return null;\n    }\n\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach((directive) => {\n          if (directive.name.value === \"export\" && directive.arguments) {\n            directive.arguments.forEach((arg) => {\n              if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      const isClientField =\n        field.directives?.some((d) => d.name.value === \"client\") ?? false;\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(\n          field,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    result: any[],\n    execContext: ExecContext\n  ): any {\n    return Promise.all(\n      result.map((item) => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(\n            field,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(\n            field.selectionSet,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n      })\n    );\n  }\n\n  // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n  private collectSelectionsToResolve(\n    mainDefinition: OperationDefinitionNode,\n    fragmentMap: FragmentMap\n  ): Set<SelectionNode> {\n    const isSingleASTNode = (\n      node: ASTNode | readonly ASTNode[]\n    ): node is ASTNode => !Array.isArray(node);\n    const selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(\n      definitionNode: ExecutableDefinitionNode\n    ): Set<SelectionNode> {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        const matches = new Set<SelectionNode>();\n        selectionsToResolveCache.set(definitionNode, matches);\n\n        visit(definitionNode, {\n          Directive(node: DirectiveNode, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread(spread: FragmentSpreadNode, _, __, ___, ancestors) {\n            const fragment = fragmentMap[spread.name.value];\n            invariant(fragment, `No fragment named %s`, spread.name.value);\n\n            const fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n              matches.add(spread);\n              fragmentSelections.forEach((selection) => {\n                matches.add(selection);\n              });\n            }\n          },\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode)!;\n    }\n    return collectByDefinition(mainDefinition);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}