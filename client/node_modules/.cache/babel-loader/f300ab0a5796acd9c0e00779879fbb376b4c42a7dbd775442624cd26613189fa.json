{"ast":null,"code":"import * as React from \"rehackt\";\nimport { getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useReadQuery(queryRef) {\n  return wrapHook(\"useReadQuery\", _useReadQuery, unwrapQueryRef(queryRef)[\"observable\"])(queryRef);\n}\nfunction _useReadQuery(queryRef) {\n  var internalQueryRef = React.useMemo(function () {\n    return unwrapQueryRef(queryRef);\n  }, [queryRef]);\n  var getPromise = React.useCallback(function () {\n    return getWrappedPromise(queryRef);\n  }, [queryRef]);\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n  React.useEffect(function () {\n    // It may seem odd that we are trying to reinitialize the queryRef even\n    // though we reinitialize in render above, but this is necessary to\n    // handle strict mode where this useEffect will be run twice resulting in a\n    // disposed queryRef before the next render.\n    if (internalQueryRef.disposed) {\n      internalQueryRef.reinitialize();\n    }\n    return internalQueryRef.retain();\n  }, [internalQueryRef]);\n  var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    return internalQueryRef.listen(function (promise) {\n      updateWrappedQueryRef(queryRef, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef]), getPromise, getPromise);\n  var result = __use(promise);\n  return React.useMemo(function () {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result)\n    };\n  }, [result]);\n}","map":{"version":3,"names":["React","getWrappedPromise","unwrapQueryRef","updateWrappedQueryRef","__use","wrapHook","toApolloError","useSyncExternalStore","useReadQuery","queryRef","_useReadQuery","internalQueryRef","useMemo","getPromise","useCallback","disposed","reinitialize","promise","useEffect","retain","forceUpdate","listen","result","data","networkStatus","error"],"sources":["C:\\Users\\zachc\\Documents\\bootcamp\\chicken_practice\\client\\node_modules\\@apollo\\src\\react\\hooks\\useReadQuery.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport {\n  getWrappedPromise,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n} from \"../internal/index.js\";\nimport type { QueryReference } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloError } from \"../../errors/index.js\";\nimport type { NetworkStatus } from \"../../core/index.js\";\n\nexport interface UseReadQueryResult<TData = unknown> {\n  /**\n   * An object containing the result of your GraphQL query after it completes.\n   *\n   * This value might be `undefined` if a query results in one or more errors\n   * (depending on the query's `errorPolicy`).\n   */\n  data: TData;\n  /**\n   * If the query produces one or more errors, this object contains either an\n   * array of `graphQLErrors` or a single `networkError`. Otherwise, this value\n   * is `undefined`.\n   *\n   * This property can be ignored when using the default `errorPolicy` or an\n   * `errorPolicy` of `none`. The hook will throw the error instead of setting\n   * this property.\n   */\n  error: ApolloError | undefined;\n  /**\n   * A number indicating the current network state of the query's associated\n   * request. {@link https://github.com/apollographql/apollo-client/blob/d96f4578f89b933c281bb775a39503f6cdb59ee8/src/core/networkStatus.ts#L4 | See possible values}.\n   */\n  networkStatus: NetworkStatus;\n}\n\nexport function useReadQuery<TData>(\n  queryRef: QueryReference<TData>\n): UseReadQueryResult<TData> {\n  return wrapHook(\n    \"useReadQuery\",\n    _useReadQuery,\n    unwrapQueryRef(queryRef)[\"observable\"]\n  )(queryRef);\n}\n\nfunction _useReadQuery<TData>(\n  queryRef: QueryReference<TData>\n): UseReadQueryResult<TData> {\n  const internalQueryRef = React.useMemo(\n    () => unwrapQueryRef(queryRef),\n    [queryRef]\n  );\n\n  const getPromise = React.useCallback(\n    () => getWrappedPromise(queryRef),\n    [queryRef]\n  );\n\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n\n  React.useEffect(() => {\n    // It may seem odd that we are trying to reinitialize the queryRef even\n    // though we reinitialize in render above, but this is necessary to\n    // handle strict mode where this useEffect will be run twice resulting in a\n    // disposed queryRef before the next render.\n    if (internalQueryRef.disposed) {\n      internalQueryRef.reinitialize();\n    }\n\n    return internalQueryRef.retain();\n  }, [internalQueryRef]);\n\n  const promise = useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        return internalQueryRef.listen((promise) => {\n          updateWrappedQueryRef(queryRef, promise);\n          forceUpdate();\n        });\n      },\n      [internalQueryRef]\n    ),\n    getPromise,\n    getPromise\n  );\n\n  const result = __use(promise);\n\n  return React.useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SACEC,iBAAiB,EACjBC,cAAc,EACdC,qBAAqB,QAChB,sBAAsB;AAE7B,SAASC,KAAK,EAAEC,QAAQ,QAAQ,qBAAqB;AACrD,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,oBAAoB,QAAQ,2BAA2B;AA6BhE,OAAM,SAAUC,YAAYA,CAC1BC,QAA+B;EAE/B,OAAOJ,QAAQ,CACb,cAAc,EACdK,aAAa,EACbR,cAAc,CAACO,QAAQ,CAAC,CAAC,YAAY,CAAC,CACvC,CAACA,QAAQ,CAAC;AACb;AAEA,SAASC,aAAaA,CACpBD,QAA+B;EAE/B,IAAME,gBAAgB,GAAGX,KAAK,CAACY,OAAO,CACpC;IAAM,OAAAV,cAAc,CAACO,QAAQ,CAAC;EAAxB,CAAwB,EAC9B,CAACA,QAAQ,CAAC,CACX;EAED,IAAMI,UAAU,GAAGb,KAAK,CAACc,WAAW,CAClC;IAAM,OAAAb,iBAAiB,CAACQ,QAAQ,CAAC;EAA3B,CAA2B,EACjC,CAACA,QAAQ,CAAC,CACX;EAED,IAAIE,gBAAgB,CAACI,QAAQ,EAAE;IAC7BJ,gBAAgB,CAACK,YAAY,EAAE;IAC/Bb,qBAAqB,CAACM,QAAQ,EAAEE,gBAAgB,CAACM,OAAO,CAAC;EAC3D;EAEAjB,KAAK,CAACkB,SAAS,CAAC;IACd;IACA;IACA;IACA;IACA,IAAIP,gBAAgB,CAACI,QAAQ,EAAE;MAC7BJ,gBAAgB,CAACK,YAAY,EAAE;IACjC;IAEA,OAAOL,gBAAgB,CAACQ,MAAM,EAAE;EAClC,CAAC,EAAE,CAACR,gBAAgB,CAAC,CAAC;EAEtB,IAAMM,OAAO,GAAGV,oBAAoB,CAClCP,KAAK,CAACc,WAAW,CACf,UAACM,WAAW;IACV,OAAOT,gBAAgB,CAACU,MAAM,CAAC,UAACJ,OAAO;MACrCd,qBAAqB,CAACM,QAAQ,EAAEQ,OAAO,CAAC;MACxCG,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EACD,CAACT,gBAAgB,CAAC,CACnB,EACDE,UAAU,EACVA,UAAU,CACX;EAED,IAAMS,MAAM,GAAGlB,KAAK,CAACa,OAAO,CAAC;EAE7B,OAAOjB,KAAK,CAACY,OAAO,CAAC;IACnB,OAAO;MACLW,IAAI,EAAED,MAAM,CAACC,IAAI;MACjBC,aAAa,EAAEF,MAAM,CAACE,aAAa;MACnCC,KAAK,EAAEnB,aAAa,CAACgB,MAAM;KAC5B;EACH,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}